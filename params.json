{"name":"Pageobject.js","tagline":"jQuery utility for creating reusable objects compound from DOM parts","body":"_PageObject_ is an abstraction meaning part of a web page maintating its specific logic over its components (DOM elements and other page objects when necessary).\r\n\r\nWhile creating rich web applications we usually single out page blocks. We refer to those blocks as objects when we need to repeat them somehow here or there. This is where the utility comes to hand. **PageObject.js** would help you if for such cases you used to render client-side templates and then revive their rendered results.\r\n\r\n**PageObject.js** is a jQuery utility and there are actually only two functions:\r\n\r\n- `$.turnToPageObject`and\r\n- `$.turnToPageObject.configure`.\r\n\r\n---\r\n\r\n## $.turnToPageObject( _[object]_ target, _[object]_ options )\r\n\r\nThe idea is that `target` should get `target.DOM` namespace filled with HTML DOM elements according to `options.selectors` taken from `options.template` rendered  with `options.context`.\r\n\r\n```javascript\r\nfunction LoginForm(successCallback) {\r\n  var lf = this;\r\n  $.turnToPageObject(lf, {\r\n    template: '<form>'+\r\n              '<h1><%= caption %></h1>'+\r\n              '<input type=\"text\" name=\"email\" />'+\r\n              '<input type=\"password\" name=\"password\" />'+\r\n              '<input type=\"submit\" name=\"submit\" />'\r\n              '</form',\r\n    context: {\r\n      caption: I18n.t(\"Please enter your credentials below\")\r\n    },\r\n    selectors: {\r\n      form: 'form',\r\n      email: 'input[name=email]',\r\n      password: ':password'\r\n    }\r\n  });\r\n\r\n  $(lf.DOM.form).submit(function (e) {\r\n    e.preventDefault();\r\n    var email = $(lf.DOM.email).val(),\r\n      password = $(lf.DOM.password).val(),\r\n      ok = authenticate(email, password);\r\n      if (!ok) {\r\n        alert(\"No way, buddy!\");\r\n      } else {\r\n        success();\r\n      }\r\n  });\r\n}\r\n\r\nvar loginForm = new LoginForm(function () {\r\n  // render some other view\r\n});\r\n\r\n$('body').append(loginForm.DOM.container);\r\n```\r\n\r\n### $.turnToPageObject options\r\n\r\n#### Container related\r\n\r\nIf you ommit `container` _DOM element_ it will be created for you from `containerElement` which is **DIV** by default.\r\n\r\nIf you provide `containerClass` _string_ option, your `target.DOM.container` will get that class.\r\n\r\nIf you set `hide` to `true` option, `target.DOM.container` will be hidden. This has proved to be useful.\r\n\r\n#### Template related\r\n\r\nif you provide `template` option, the rendered template will be placed inside `target.DOM.container`.\r\n\r\nIf you omit `context` option, template will be rendered with empty context `{}`.\r\n\r\n`template` can be either a function or a string.\r\n\r\n- Function `template` takes single argument, a `context` object, and returns string. This is made for integration with [Jammit JST](http://documentcloud.github.io/jammit/#jst).\r\n- String templates are rendered with `templateEngine` which takes two arguments, `template` string and `context` object. `templateEngine` function also returns string.\r\n\r\n`templateEngine` is being automatically configured to use `_.template` if [Underscore](http://documentcloud.github.io/underscore) is present.\r\n\r\nIf there's no _Underscore_ in your project, you'll need to configure `templateEngine`.\r\n\r\nThis is how to set defaults:\r\n```javascript\r\n$.turnToPageObject.configure({\r\n  templateEngine: window.tmpl, // http://ejohn.org/blog/javascript-micro-templating\r\n  containerElement: 'strong'\r\n});\r\n```\r\n\r\n#### Selectors\r\n\r\nIf you provide `selectors` _object_ option, HTML DOM elements will be found within `target.DOM.container` and placed in `target.DOM` under corresponding keys. If `template` option was specified, `selectors` will be searching after it is rendered into the container.\r\n\r\nIf a selector fails to find any element it will throw an exception. If it finds multiple elements it will shout too. If you do really need to find multiple selectors and store them in array under the corresponding key, just prepend `[]` (square brackets) to a selector, e.g. '[] ul > li'.\r\n\r\nIf you need to collect some elements into an object having their keys determined from HTML DOM elements found, like in the [Calculator](http://j.mp/Z1roQS) demo, write selector as a two elements array `[ realSelector, functionToDetermineElementsKey ]`.\r\n\r\nNamespaces in `selectors` result in same namespaces in `target.DOM`.\r\n\r\n---\r\n\r\nPlease check out [the demo](http://j.mp/Z1roQS), [the source code](https://github.com/IronGroove/PageObject.js) and tests to learn more about how things work.\r\n","google":"UA-38290306-4","note":"Don't delete this file! It's used internally to help with page regeneration."}